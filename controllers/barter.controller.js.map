{"version":3,"sources":["../../src/controllers/barter.controller.js"],"names":["validateBarter","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","findById","user","Error","category","optional","isIn","isArray","checkParams","barter","getValidationResult","checkIfValidIds","categories","next","Types","ObjectId","isValid","BadRequest","findAll","res","query","page","limit","type","finished","split","length","relatedCategory","$in","parseInt","find","populate","sort","creationDate","skip","barters","count","bartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","createBarter","validationErrors","isEmpty","mapped","newBarterId","body","imgs","create","_id","createdBarter","id","status","params","NotFound","updateBarter","findByIdAndUpdate","new","updatedBarter","deleteBarter","findByIdAndRemove","deletedBarter"],"mappings":"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","file":"barter.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\nimport mongoose from \"mongoose\" ;\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { handleImgs } from \"../utils\";\nimport { checkAllMyOfferAndFavouriteIn, checkMyOfferAndFavouriteIn } from \"../helpers/Barter&AuctionHelper\";\n\nconst validateBarter = (req, isUpdate = false) => {\n    req.checkBody(\"title\").notEmpty().withMessage(\"titles is Required\")\n    req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");\n    req.checkBody(\"neededProduct\").notEmpty().withMessage(\"neededProduct is required\");\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is required\").custom(async value => {\n        const user = await User.findById(value);\n        if(!user) throw new Error(\"User doesn't exist\") \n    }).withMessage('User doesnt exist');\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory is required\").custom(async value => {\n        const category = await Category.findById(value);\n        if (!category) throw new Error(\"Category doesn't exist\")\n    }).withMessage(\"Category doesn't exist\");\n\n    req.checkBody('type').optional().isIn(['TEMP', 'PERM']).withMessage(\"type of barter should be 'TEMP' OR 'PERM'\")\n    req.checkBody('finished').optional().isIn(['true','false']).withMessage(\"finished should be true or false\");\n    req.checkBody('imgs').optional().isArray().withMessage(\"Imgs should be an array of strings 'images 64base'\");\n    \n    if (isUpdate)\n        req.checkParams('id').custom(async value => {\n            let barter = await Barter.findById(value);\n            if (!barter)\n                throw new Error('Barter Not Found');\n        }).withMessage('Barter Not Found');\n\n    return req.getValidationResult();\n}\nconst checkIfValidIds = (categories, next) => { \n    for(let category of categories) {\n        if(!mongoose.Types.ObjectId.isValid(category))\n            return next(new ApiError.BadRequest(400, 'you have sent an invalid category id: ', category))\n    }\n}\n\nexport default {\n    async findAll(req, res, next) {\n        let { page, limit , categories , type , finished } = req.query;\n        let query = {};\n        \n        if (categories){\n            categories = categories.split(',');\n            checkIfValidIds(categories, next);\n            if (categories.length > 1) {\n                query.relatedCategory = { $in: categories }\n            }\n            else query.relatedCategory = categories[0];\n        }\n        if (type)\n            query.type = type;\n        if (finished)\n            query.finished = finished;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            let barters = await Barter.find(query).populate('relatedCategory relatedUser barterOffer')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n\n            const bartersCount = await Barter.count(query);\n            \n            const pageCount = Math.ceil(bartersCount / limit);\n  \n            barters = await checkAllMyOfferAndFavouriteIn(barters, req);\n\n            let response = new ApiResponse(barters, page, pageCount, limit, bartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n    async createBarter(req, res, next) {\n        \n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {         \n            const newBarterId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barters\", newBarterId , req);\n            \n            const createdBarter = await Barter.create({_id: newBarterId , ...req.body});               \n\n            const barter = await Barter.findById(createdBarter.id).populate('relatedCategory relatedUser');\n            \n            res.status(201).send(barter);\n            \n        } catch (err) {\n            next(err);\n        }\n    },\n\n    async findById(req, res, next) {\n        const { id } = req.params;\n        try{\n            let barter = await Barter.findById(id).populate('relatedCategory relatedUser barterOffer');\n            if (!barter)\n               return next(new ApiError.NotFound('Barter'));\n           \n            barter = await checkMyOfferAndFavouriteIn(barter, req);\n            res.send(barter);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    async updateBarter(req, res, next) {\n\n        const validationErrors = await validateBarter(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { id } = req.params;\n            \n        try {\n\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barters\", id , req);\n            \n            let updatedBarter = await Barter.findByIdAndUpdate(id, req.body, { new: true }).populate('relatedCategory relatedUser barterOffer');\n            updatedBarter = await checkMyOfferAndFavouriteIn(updatedBarter, req);\n            res.status(200).send(updatedBarter);\n        } \n        catch (err) {\n            next(err)\n        }\n    },\n\n\n    async deleteBarter(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedBarter = await Barter.findByIdAndRemove(id);\n            if (!deletedBarter)\n                return next(new ApiError.NotFound('Barter'));\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}"]}