{"version":3,"sources":["../../src/controllers/barter-offer.controller.js"],"names":["validateBarterOffer","req","isUpdate","checkBody","isIn","withMessage","notEmpty","custom","value","findById","user","Error","isArray","optional","matches","checkParams","barter","getValidationResult","registerMyOfferInBarter","barterId","userId","findByIdAndUpdate","$addToSet","offerUsers","new","findAll","res","next","params","query","page","limit","status","relatedBarter","includes","parseInt","find","populate","sort","creationDate","skip","barterOffers","count","barterOffersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","createBarterOffer","validationErrors","isEmpty","mapped","newBarterOfferId","Types","ObjectId","body","imgs","create","_id","createdBarterOffer","$push","id","barterOffer","barterOfferNotification","relatedUser","offerUser","io","app","get","nsp","of","emit","fullName","offerId","findOne","NotFound","updateBarterOffer","finished","updatedBarterOffer"],"mappings":"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","file":"barter-offer.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport User from \"../models/user.model\";\nimport mongoose from \"mongoose\" ;\nimport { handleImgs }  from \"../utils\";\nimport BarterOfferNotification from \"../models/barter-offer-notification.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { sendNotificationToUser } from '../helpers/PushNotificationsHelper';\n\nconst validateBarterOffer = (req, isUpdate = false) => {\n    if (isUpdate)\n        req.checkBody(\"status\").isIn(['PENDING','ACCEPTED','REJECTED','DONE']).withMessage('valid status is required');\n    else {   \n        req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is Required\").custom(async value => {\n            const user = await User.findById(value);\n            if(!user) throw new Error()\n        }).withMessage('Enter a valid user id')\n        req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");    \n        req.checkBody(\"offeredProduct\").notEmpty().withMessage(\"offeredProduct is required\");\n        req.checkBody(\"imgs\").notEmpty().withMessage(\"imgs is required\").isArray().withMessage(\"Imgs Should be an array of imgs's base64\");\n        req.checkBody(\"status\").optional().matches('PENDING').withMessage(\"you can't overwrite status it's PENDING by default\");\n    } \n    req.checkParams(\"barterId\").custom(async value => {\n        const barter = await Barter.findById(value);\n        if(!barter) new new Error();\n    }).withMessage('Barter Not Found');\n    \n    return req.getValidationResult();\n};\n\nconst registerMyOfferInBarter = async (barterId, userId) => {\n    await Barter.findByIdAndUpdate(barterId, { $addToSet: { offerUsers: userId } }, { new: true });    \n};\n\nexport default {\n    async findAll(req, res, next) {\n        let { barterId } = req.params\n        let { page, limit, status } = req.query;\n        let query = {\n            relatedBarter: barterId\n        };\n\n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;            \n            \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barterOffers = await BarterOffer.find(query).populate('relatedBarter relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const barterOffersCount = await BarterOffer.count(query);\n            \n            const pageCount = Math.ceil(barterOffersCount / limit);\n            let response = new ApiResponse(barterOffers, page, pageCount, limit, barterOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n\n    async createBarterOffer(req, res, next) {   \n        const validationErrors = await validateBarterOffer(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n       \n        let { barterId } = req.params;\n        try {\n       \n            const newBarterOfferId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barter-offers\", newBarterOfferId , req);\n            req.body.relatedBarter = barterId;\n            \n            let createdBarterOffer = await BarterOffer.create({_id : newBarterOfferId, ...req.body});\n            \n            await Barter.findByIdAndUpdate(barterId, { $push: { offerUsers: req.user.id } });\n\n            const barterOffer = await BarterOffer.findById(createdBarterOffer.id).populate('relatedBarter relatedUser');            \n            res.status(201).send(barterOffer);   \n\n            registerMyOfferInBarter(barterId, req.user.id);\n            \n\n            let barter = await Barter.findById(barterId);\n            \n            let barterOfferNotification = {\n                user: barter.relatedUser,\n                relatedBarter: barterId,\n                offerUser: req.user.id                \n            };\n            barterOfferNotification = await BarterOfferNotification.create(barterOfferNotification) ;\n            barterOfferNotification = await BarterOfferNotification.findById(barterOfferNotification.id).populate(\"offerUser relatedBarter\") ;\n          \n            let io = req.app.get('io');\n            let nsp = io.of(\"/notifications/\" + barter.relatedUser + \"/barter-offers\") ;\n            nsp.emit(\"newMessage\", barterOfferNotification);\n\n            sendNotificationToUser('مقايضة جديدة', ` أرسل إليك طلب خدمة : ${barterOfferNotification.offerUser.fullName}`, barter.relatedUser, `barters/${barter.id}`);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findById(req, res, next) {\n        const { barterId, offerId } = req.params;\n\n        try{\n            const barterOffer = await BarterOffer.findOne({_id: offerId, relatedBarter: barterId }).populate('relatedBarter relatedUser');\n            if (!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));        \n            \n            res.send(barterOffer);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    // Update Status of BarterOffer only\n    async updateBarterOffer(req, res, next) {\n        const validationErrors = await validateBarterOffer(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { barterId, offerId } = req.params;\n        try {\n            const barterOffer = await BarterOffer.findOne({ _id : offerId , relatedBarter: barterId } ).populate('relatedUser');\n            if(!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));\n    \n            switch(barterOffer.status){\n                case 'PENDING':\n                    if (!(req.body.status === 'ACCEPTED' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be ACCEPTED or REJECTED'));\n                    break;\n                case 'ACCEPTED':\n                    if (!(req.body.status === 'DONE' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be DONE or REJECTED'));\n                    break;\n                case 'REJECTED':\n                case 'DONE':\n                    return next(new ApiError(400, \"you can't update DONE or REJECTED offer\"));\n                    break;\n            }\n\n            if (req.body.status === 'DONE'){\n                await Barter.findByIdAndUpdate(barterId, {\n                    barterOffer: barterOffer.id , finished: true \n                });\n            }\n\n            // if (req.body.status === 'REJECTED'){\n            //     let barter = await Barter.findById(barterId);\n            //     barter.offerUsers = barter.offerUsers.filter(user => { \n            //         user != barterOffer.relatedUser.id });\n            //     console.log(\"Rejected offer in :\" , barter);\n            //     barter.save();\n            // }\n\n            const updatedBarterOffer = await BarterOffer.findByIdAndUpdate(offerId, { status: req.body.status} , { new: true });\n            res.status(200).send(updatedBarterOffer);    \n        }\n        catch (err) {\n            next(err);\n        }\n    }\n\n}"]}