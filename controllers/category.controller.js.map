{"version":3,"sources":["../../src/controllers/category.controller.js"],"names":["validateCategory","req","checkBody","notEmpty","withMessage","custom","value","findOne","name","category","Error","getValidationResult","findAll","res","next","find","allCategories","status","send","createCategory","validationErrors","isEmpty","mapped","create","body","createdCategory","updateCategory","id","params","findByIdAndUpdate","new","updatedCategory","NotFound","deleteCategory","findByIdAndRemove","deletedCategory"],"mappings":"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","file":"category.controller.js","sourcesContent":["import Category from \"../models/category.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateCategory = req => {\n    req.checkBody(\"name\")\n        .notEmpty().withMessage(\"category's name is required\")\n        .custom(async value => {\n            const category = await Category.findOne({ name: value });\n            if (category) throw new Error();\n        }).withMessage(\"this category name already exists\");\n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        try {\n            const allCategories = await Category.find({});\n            res.status(200).send(allCategories);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async createCategory(req, res, next) {\n\n        const validationErrors = await validateCategory(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            const createdCategory = await Category.create(req.body);\n            res.status(201).send(createdCategory);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async updateCategory(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateCategory(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            const updatedCategory = await Category.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedCategory)\n                return next(new ApiError.NotFound('Category'));\n            res.status(200).send(updatedCategory);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async deleteCategory(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedCategory = await Category.findByIdAndRemove(id);\n            if (!deletedCategory)\n                return next(new ApiError.NotFound('Category'));\n                \n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}"]}