{"version":3,"sources":["../../src/controllers/auction-offer.controller.js"],"names":["validateAuctionOfferBody","req","highestPrice","checkBody","notEmpty","withMessage","custom","findById","value","then","user","Error","matches","getValidationResult","registerMyOfferInAuction","auctionId","userId","findByIdAndUpdate","$addToSet","offerUsers","new","create","res","next","params","auction","result","isEmpty","mapped","body","winned","relatedAuction","offer","price","save","id","populate","status","send","notification","relatedUser","bidder","io","app","get","nsp","of","emit","title","fullName"],"mappings":"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","file":"auction-offer.controller.js","sourcesContent":["import AuctionOffer from \"../models/auction-offer.model\";\nimport AuctionOfferNotification from \"../models/auction-notification.model\" ;\nimport User from \"../models/user.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport Auction from \"../models/auction.model\";\nimport { notDeepEqual } from \"assert\";\nimport { sendNotificationToUser } from '../helpers/PushNotificationsHelper';\n\n\nconst validateAuctionOfferBody = (req, highestPrice) => {\n    req.checkBody(\"bidder\").notEmpty().withMessage(\"bidder Required\")\n        .custom(value => {\n            return User.findById(value).then(user => {\n                if (!user)\n                    throw new Error(\"bidder user Is Not Found\");\n            })\n        }).withMessage(\"bidder is Not Found in the system\");\n\n    req.checkBody(\"price\")\n        .notEmpty().withMessage(\"price required\")\n        .matches(/\\d/).withMessage(\"Invalid Number\")\n        .custom(value => highestPrice < value).withMessage(\"price must be more than highest price\");\n\n    return req.getValidationResult();\n\n};\n\nconst registerMyOfferInAuction = async (auctionId, userId) => {\n    await Auction.findByIdAndUpdate(auctionId, { $addToSet: { offerUsers: userId } }, { new: true });    \n};\n\nexport default {\n\n    async create(req, res, next) {\n\n        let auctionId = req.params.auctionId;\n\n        let auction = await Auction.findById(auctionId);\n        if (!auction)\n            return next(new ApiError(404, \"Auction Not Found\"));\n\n        else {\n            let result = await validateAuctionOfferBody(req, auction.highestPrice);\n\n            if (!result.isEmpty())\n                return next(new ApiError(422, result.mapped()));\n            else {\n                if(req.body.winned)\n                    return next(new ApiError(403, \"You aren't allowed to overwrite this field\"));\n\n                req.body.relatedAuction = auctionId;\n                let offer = await AuctionOffer.create(req.body);\n\n                auction.highestPrice = offer.price;\n                auction.save();\n\n                offer = await AuctionOffer.findById(offer.id).populate(\"bidder relatedAuction\");\n                res.status(201).send(offer);\n                registerMyOfferInAuction(auctionId, req.user.id);\n\n\n                let notification = {\n                    user: auction.relatedUser,\n                    relatedAuction: auctionId,\n                    bidder: req.user.id\n                };\n                notification = await AuctionOfferNotification.create(notification) ;\n                notification = await AuctionOfferNotification.findById(notification.id).populate(\"bidder relatedAuction\") ;\n              \n                let io = req.app.get('io');\n                let nsp = io.of(\"/notifications/\"+auction.relatedUser+\"/auctions\") ;\n                nsp.emit(\"newMessage\", notification) ;\n\n                sendNotificationToUser('مزايدة جديدة', `${auction.title} : قام بالمزايدة على  ${offer.bidder.fullName}` , auction.relatedUser, `auctions/${auction.id}`);\n            }\n        }\n\n    },\n\n}"]}