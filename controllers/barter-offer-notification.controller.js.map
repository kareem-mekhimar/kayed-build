{"version":3,"sources":["../../src/controllers/barter-offer-notification.controller.js"],"names":["findAll","req","res","next","params","id","NotFound","query","page","limit","parseInt","find","user","populate","sort","creationDate","skip","notifications","count","notificationsCount","pageCount","Math","ceil","response","send","findManyUnseen","seen","resetAll","update","multi","status","end"],"mappings":"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","file":"barter-offer-notification.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport BarterOfferNotifcation from \"../models/barter-offer-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from '../helpers/CheckMethods';\n\n\nexport default {\n    async findAll(req, res, next) {\n        \n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n        \n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let notifications = await BarterOfferNotifcation.find({ user: req.user.id }).populate(\"offerUser relatedBarter\")\n                .sort({ creationDate: -1 })\n                .limit(limit)\n                .skip((page - 1) * limit);\n\n            const notificationsCount = await BarterOfferNotifcation.count({ user: req.user.id });\n\n            const pageCount = Math.ceil(notificationsCount / limit);\n            let response = new ApiResponse2(notifications, page, pageCount, limit, notificationsCount, req);\n\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findManyUnseen(req, res, next) {\n\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n        \n\n        let notifications = await BarterOfferNotifcation.find({ user: req.user.id, seen: false }).populate(\"offerUser relatedBarter\")\n            .sort({ creationDate: -1 })\n            .limit(10);\n\n        res.send(notifications);\n    },\n\n    \n    async resetAll(req, res, next) {\n        \n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n\n        await BarterOfferNotifcation.update({ user: req.user.id, seen: false }, { seen: true }, { multi: true });\n\n        res.status(204).end();\n    }\n}\n\n"]}