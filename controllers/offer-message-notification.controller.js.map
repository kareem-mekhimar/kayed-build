{"version":3,"sources":["../../src/controllers/offer-message-notification.controller.js"],"names":["findAll","req","res","next","params","id","NotFound","query","page","limit","parseInt","find","user","populate","sort","creationDate","skip","notifications","count","notificationsCount","pageCount","Math","ceil","response","send","findManyUnseen","seen","resetAll","update","multi","status","end"],"mappings":"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","file":"offer-message-notification.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport OfferMessageNotification from \"../models/offer-message-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from \"../helpers/CheckMethods\";\n\nexport default {\n    async findAll(req, res, next) {\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));\n        \n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let notifications = await OfferMessageNotification.find({ user: req.params.id }).populate(\"fromUser relatedBarter\")\n                .sort({ creationDate: -1 })\n                .limit(limit)\n                .skip((page - 1) * limit);\n\n            const notificationsCount = await OfferMessageNotification.count({ user: req.params.id });\n\n            const pageCount = Math.ceil(notificationsCount / limit);\n            let response = new ApiResponse2(notifications, page, pageCount, limit, notificationsCount, req);\n\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findManyUnseen(req, res, next) {\n\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));        \n\n        let notifications = await OfferMessageNotification.find({ user: req.params.id, seen: false }).populate(\"fromUser relatedBarter\")\n            .sort({ creationDate: -1 })\n            .limit(10);\n\n        res.send(notifications);\n    },\n\n    \n    async resetAll(req, res, next) {\n        \n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n\n        await OfferMessageNotification.update({ user: req.params.id, seen: false }, { seen: true }, { multi: true });\n\n        res.status(204).end();\n    }\n}\n\n"]}