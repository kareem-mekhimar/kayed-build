{"version":3,"sources":["../../src/controllers/auction-notification.controller.js"],"names":["findAll","req","res","next","params","id","NotFound","query","page","limit","parseInt","find","user","populate","sort","creationDate","skip","notifications","count","pageCount","Math","ceil","response","send","findUnseen","seen","reset","update","multi","status","end"],"mappings":"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","file":"auction-notification.controller.js","sourcesContent":["import mongoose from \"mongoose\";\nimport User from \"../models/user.model\";\nimport AuctionNotifcation from \"../models/auction-notification.model\";\nimport ApiResponse2 from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from '../helpers/CheckMethods';\n\nexport default {\n    async findAll(req, res, next) {\n\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n        \n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let notifications = await AuctionNotifcation.find({ user: req.user.id }).populate(\"bidder relatedAuction\")\n                .sort({ creationDate: -1 })\n                .limit(limit)\n                .skip((page - 1) * limit);\n\n            const count = await AuctionNotifcation.count({ user: req.user.id });\n\n            const pageCount = Math.ceil(count / limit);\n            let response = new ApiResponse2(notifications, page, pageCount, limit, count, req);\n\n            res.send(response);\n\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findUnseen(req, res, next) {\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n\n        let notifications = await AuctionNotifcation.find({ user: req.user.id, seen: false }).populate(\"bidder relatedAuction\")\n            .sort({ creationDate: -1 })\n            .limit(10);\n\n        res.send(notifications);\n    },\n\n\n    async reset(req, res, next) {\n        if(await isUserNotExist(req.params.id))\n            return next(new ApiError.NotFound('User'));    \n\n        await AuctionNotifcation.update({ user: req.user.id, seen: false }, { seen: true }, { multi: true });\n\n        res.status(204).end();\n    }\n}\n\n"]}