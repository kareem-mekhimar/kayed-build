{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","user","email","findOne","_id","$ne","Error","then","getValidationResult","checkIfUserExist","next","findById","NotFound","registerAsMyFavourite","itemId","userId","isBarter","findByIdAndUpdate","$addToSet","favUsers","UnRegisterAsMyFavourite","signUp","res","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","params","updateUser","new","updatedUser","getUserBarters","query","page","limit","parseInt","find","relatedUser","populate","sort","creationDate","skip","userBarters","count","userBartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","getUserAuctions","userAuctions","userAuctionsCount","getUserFavoriteBarters","select","path","model","userFavBarters","userFavBartersCount","getUserFavoriteAuctions","userFavAuctions","userFavAuctionsCount","updateFavBarter","barter","userFavBarter","createdUserFavBarter","updateFavAuction","auction","userFavAuction","createdUserFavAuction","deleteFavBarter","barterId","remove","deletedFavBarter","deleteFavAuction","auctionId","deletedFavAuction"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport FavBarter from \"../models/fav-barter.model\";\nimport FavAuction from \"../models/fav-auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl, isValidImgUrl } from \"../utils\";\nimport { checkAllMyOfferAndFavouriteIn, checkMyOfferAndFavouriteIn } from \"../helpers/Barter&AuctionHelper\";\nimport { sendNotificationToUser } from \"../helpers/PushNotificationsHelper\"\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = (req, isUpdate = false) => {\n    if (isUpdate) {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n            .custom(async value => {\n                if (req.user.email !== value) {\n                    const user = await User.findOne({ email: value, _id: { $ne: req.user._id } })\n                    if (user)\n                        throw new Error(\"email already taken\");\n                }\n            }).withMessage(\"email already taken\");\n    } else {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n            .custom(value => {\n                return User.findOne({ email: value }).then(user => {\n                    if (user)\n                        throw new Error(\"email already exists\");\n                })\n            }).withMessage(\"email already exists\");\n    }\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n\n    return req.getValidationResult();\n}\n\n\nconst checkIfUserExist = async (id, next) => {\n    const user = await User.findById(id);\n    if (!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nconst registerAsMyFavourite = async (itemId, userId, isBarter=true) => {\n    if (isBarter)\n        await Barter.findByIdAndUpdate(itemId, { $addToSet: { favUsers: userId } });    \n    else\n        await Auction.findByIdAndUpdate(itemId, { $addToSet: { favUsers: userId } });    \n};\n\nconst UnRegisterAsMyFavourite = async (itemId, userId, isBarter=true) => {\n    if (isBarter)\n        await Barter.findByIdAndUpdate(itemId, { '$pull': { favUsers: userId } });\n    else\n        await Auction.findByIdAndUpdate(itemId, { '$pull': { favUsers: userId } });\n};\n\nexport default {\n\n    async signUp(req, res, next) {\n        const validationErrors = await validateUserBody(req);\n\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\" + id, req);\n                    user.save();\n                }\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async findById(req, res, next) {\n        const { id } = req.params;\n\n        let user = await User.findById(id);\n        if (!user)\n            return next(new ApiError.NotFound(\"User\"));\n\n        res.send(user);\n    },\n\n    async updateUser(req, res, next) {\n\n        const validationErrors = await validateUserBody(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        const { id } = req.params;\n        checkIfUserExist(id, next);\n\n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                if(!isValidImgUrl(img))\n                {\n                    updatedUser.img = writeBase64AndReturnUrl(img, \"users/\" + id, req);\n                    updatedUser.save();\n                }\n            }\n\n            res.status(200).send({ user: updatedUser });\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n    async getUserBarters(req, res, next) {\n\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            let userBarters = await Barter.find({ relatedUser: id }).populate('relatedCategory relatedUser barterOffer')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n            \n            const userBartersCount = await Barter.count({ relatedUser : id});\n            \n            userBarters = await checkAllMyOfferAndFavouriteIn(userBarters, req);\n\n            const pageCount = Math.ceil(userBartersCount / limit);\n            let response = new ApiResponse(userBarters, page, pageCount, limit, userBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async getUserAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            let userAuctions = await Auction.find({ relatedUser: id }).populate('relatedCategory relatedUser auctionOffer')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const userAuctionsCount = await Auction.count({ relatedUser : id});\n            \n            userAuctions = await checkAllMyOfferAndFavouriteIn(userAuctions, req, false);\n\n            const pageCount = Math.ceil(userAuctionsCount / limit);\n            let response = new ApiResponse(userAuctions, page, pageCount, limit, userAuctionsCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async getUserFavoriteBarters(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userFavBarters = await FavBarter.find({ user: req.user.id }).select('barter').populate({\n                path: 'barter',\n                model: 'barter',\n                populate: {\n                    path: 'relatedUser relatedCategory barterOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const userFavBartersCount = await FavBarter.count({ user : id });\n                        \n            const pageCount = Math.ceil(userFavBartersCount / limit);\n            let response = new ApiResponse(userFavBarters, page, pageCount, limit, userFavBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async getUserFavoriteAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            let userFavAuctions = await FavAuction.find({ user: req.user.id }).select('auction').populate({\n                path: 'auction',\n                model: 'auction',\n                populate: {\n                  path: 'relatedUser relatedCategory auctionOffer'\n                }\n            })\n                .sort({ creationDate: -1 })\n                .limit(limit)\n                .skip((page - 1) * limit);\n\n            const userFavAuctionsCount = await FavAuction.count({ user: id });\n\n            const pageCount = Math.ceil(userFavAuctionsCount / limit);\n            let response = new ApiResponse(userFavAuctions, page, pageCount, limit, userFavAuctionsCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n    async updateFavBarter(req, res, next) {\n        const { id } = req.params;\n        checkIfUserExist(id, next);\n\n        if (!req.body.barter) {\n            return next(new ApiError(422, 'barter is required'))\n        };\n\n        try {\n            const barter = await Barter.findById(req.body.barter);\n            if (!barter)\n                return next(new ApiError.NotFound('Barter'))\n            \n            const userFavBarter = await FavBarter.findOne({ user: req.user.id , barter: barter.id });\n            if (!userFavBarter) {\n                registerAsMyFavourite(barter.id, req.user.id);\n    \n                const createdUserFavBarter = await FavBarter.create({ user: req.user.id , barter: req.body.barter });\n                res.status(200).send(createdUserFavBarter);\n            }\n            \n            // Already Exist Nothing to do..\n            res.send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async updateFavAuction(req, res, next) {\n        const { id } = req.params;\n        checkIfUserExist(id, next);\n\n        if (!req.body.auction) {\n            return next(new ApiError(422, 'auction is required'))\n        };\n\n        try {\n            const auction = await Auction.findById(req.body.auction);\n            if (!auction)\n                return next(new ApiError.NotFound('Auction'))\n\n            const userFavAuction = await FavAuction.findOne({ user: req.user.id , auction: auction.id });\n            if (!userFavAuction) {\n                registerAsMyFavourite(auction.id, req.user.id, false);\n                \n                const createdUserFavAuction= await FavAuction.create({ user: req.user.id , auction: req.body.auction });\n                res.status(200).send(createdUserFavAuction);\n            }\n            \n            // Already Exist Nothing to do..\n            res.send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async deleteFavBarter(req, res, next) {\n        const { id, barterId } = req.params;\n        try {\n            const deletedFavBarter = await FavBarter.findOne({ user: id, barter: barterId }).remove();\n            if (!deletedFavBarter)\n                return next(new ApiError.NotFound('User FavouriteBarter'));\n           \n            UnRegisterAsMyFavourite(barterId, req.user.id);\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async deleteFavAuction(req, res, next) {\n        const { id, auctionId } = req.params;\n        try {\n            const deletedFavAuction = await FavAuction.findOne({ user: id, auction: auctionId }).remove();\n            if (!deletedFavAuction)\n                return next(new ApiError.NotFound('User FavouriteAuction'));\n            \n            UnRegisterAsMyFavourite(auctionId, req.user.id, false);\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}\n"]}