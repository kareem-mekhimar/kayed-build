{"version":3,"sources":["../../src/controllers/user-offers.controller.js"],"names":["checkIfUserExist","id","next","findById","user","NotFound","getUserBartersInMyOffers","req","res","params","query","relatedUser","page","limit","status","includes","parseInt","find","populate","path","model","sort","creationDate","skip","userBartersOffers","count","userBartersInMyOffersCount","parentBarters","userBarterOffer","push","relatedBarter","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","getUserAuctionsInMyOffers","finished","offerUsers","auctionsWithMyOffer","auctionsWithMyOfferCount","getUserWinnedAuctions","winned","bidder","select","winnedAuctionsOffers","winnedAuctionsOffersCount","parentAuctions","winnedAuctionOffer","relatedAuction"],"mappings":"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","file":"user-offers.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport AuctionOffer from \"../models/auction-offer.model\";\nimport mongoose from 'mongoose';\nimport { checkAllMyOfferAndFavouriteIn, checkMyOfferAndFavouriteIn } from \"../helpers/Barter&AuctionHelper\";\n\nconst checkIfUserExist = async (id, next) => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async getUserBartersInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let query = { relatedUser: req.user.id };\n\n        let { page, limit, status } = req.query;\n        \n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;   \n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let userBartersOffers = await BarterOffer.find(query).populate({\n                path: 'relatedBarter',\n                model: 'barter',\n                populate: {\n                  path: 'relatedUser relatedCategory barterOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n\n            let userBartersInMyOffersCount = await BarterOffer.count(query);\n            let parentBarters = [];\n            \n            for(let userBarterOffer of userBartersOffers)\n                parentBarters.push(userBarterOffer.relatedBarter);\n\n            parentBarters = await checkAllMyOfferAndFavouriteIn(parentBarters, req);\n              \n            const pageCount = Math.ceil(userBartersInMyOffersCount / limit);\n            let response = new ApiResponse(parentBarters, page, pageCount, limit, userBartersInMyOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserAuctionsInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        let { page, limit, finished } = req.query;\n        let query = {\n            offerUsers: req.user.id\n        };\n        \n        if(finished)\n            query.finished = finished\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let auctionsWithMyOffer = await Auction.find(query).populate('relatedUser relatedCategory auctionOffer')\n                                        .sort({ creationDate: -1 })\n                                        .limit(limit)\n                                        .skip((page - 1) * limit);\n            \n            const auctionsWithMyOfferCount = await Auction.count(query);\n\n            auctionsWithMyOffer = await checkAllMyOfferAndFavouriteIn(auctionsWithMyOffer, req, false);\n            \n            const pageCount = Math.ceil(auctionsWithMyOfferCount / limit);\n            let response = new ApiResponse(auctionsWithMyOffer, page, pageCount, limit, auctionsWithMyOfferCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserWinnedAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let winnedAuctionsOffers = await AuctionOffer.find({ winned: true , bidder: req.user.id })\n            .select('relatedAuction').populate({\n                path: 'relatedAuction',\n                model: 'auction',\n                populate: {\n                  path: 'relatedUser relatedCategory auctionOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const winnedAuctionsOffersCount = await AuctionOffer.count({ winned: true , bidder: req.user.id });\n                        \n            let parentAuctions = [];\n            for(let winnedAuctionOffer of winnedAuctionsOffers)\n                parentAuctions.push(winnedAuctionOffer.relatedAuction);\n\n            parentAuctions = await checkAllMyOfferAndFavouriteIn(parentAuctions, req, false);\n            \n            const pageCount = Math.ceil(winnedAuctionsOffersCount / limit);\n            let response = new ApiResponse(parentAuctions, page, pageCount, limit, winnedAuctionsOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}    "]}