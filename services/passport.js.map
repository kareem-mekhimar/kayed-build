{"version":3,"sources":["../../src/services/passport.js"],"names":["JwtStrategy","Strategy","LocalStrategy","ExtractJwt","jwtSecret","use","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","payload","done","findById","sub","then","user","usernameField","email","password","findOne","isValidPassword","err","isMatch","error"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,cAAc,sBAAYC,QAAhC;AACA,IAAMC,gBAAgB,wBAAcD,QAApC;IACQE,U,yBAAAA,U;IACAC,S,oBAAAA,S;;;AAGR,mBAASC,GAAT,CAAa,IAAIL,WAAJ,CAAgB;AACzBM,oBAAgBH,WAAWI,2BAAX,EADS;AAEzBC,iBAAaJ;AAFY,CAAhB,EAGV,UAACK,OAAD,EAAUC,IAAV,EAAmB;AAClB;AACA,mBAAKC,QAAL,CAAcF,QAAQG,GAAtB,EAA2BC,IAA3B,CAAgC,gBAAO;AACnC,YAAI,CAACC,IAAL,EACI,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;;AAEJ,eAAOA,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,KALD;AAMH,CAXY,CAAb;;AAcA,mBAAST,GAAT,CAAa,IAAIH,aAAJ,CAAkB;AAC3Ba,mBAAe;AADY,CAAlB,EAEV,UAACC,KAAD,EAAQC,QAAR,EAAkBP,IAAlB,EAA2B;AAC1B,mBAAKQ,OAAL,CAAa,EAAEF,YAAF,EAAb,EAAwBH,IAAxB,CAA6B,gBAAQ;AACjC,YAAI,CAACC,IAAL,EACI,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;;AAEJ;AACAI,aAAKK,eAAL,CAAqBF,QAArB,EAA8B,UAASG,GAAT,EAAaC,OAAb,EAAqB;AAC/C,gBAAGD,GAAH,EAAQ,OAAOV,KAAKU,GAAL,CAAP;AACR,gBAAG,CAACC,OAAJ,EAAa,OAAOX,KAAK,IAAL,EAAU,KAAV,EAAgB,EAAEY,OAAQ,qBAAV,EAAhB,CAAP;;AAEb,mBAAOZ,KAAK,IAAL,EAAUI,IAAV,CAAP;AACH,SALD;AAOH,KAZD;AAaH,CAhBY,CAAb","file":"passport.js","sourcesContent":["\r\nimport passport from \"passport\" ;\r\nimport passportJwt from \"passport-jwt\" ;\r\nimport passportLocal from \"passport-local\" ;\r\nimport config from \"../config\" ;\r\nimport User from \"../models/user.model\" ;\r\n\r\n\r\nconst JwtStrategy = passportJwt.Strategy;\r\nconst LocalStrategy = passportLocal.Strategy;\r\nconst { ExtractJwt } = passportJwt ;\r\nconst { jwtSecret } = config ;\r\n\r\n\r\npassport.use(new JwtStrategy({\r\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n    secretOrKey: jwtSecret\r\n}, (payload, done) => {\r\n    // find user in token\r\n    User.findById(payload.sub).then(user=> {\r\n        if (!user)\r\n            return done(null, false);\r\n\r\n        return done(null, user)\r\n    })\r\n}));\r\n\r\n\r\npassport.use(new LocalStrategy({\r\n    usernameField: 'email'\r\n}, (email, password, done) => {\r\n    User.findOne({ email }).then(user => {\r\n        if (!user)\r\n            return done(null, false);\r\n\r\n        // Compare Passwords \r\n        user.isValidPassword(password,function(err,isMatch){\r\n            if(err) return done(err) ;\r\n            if(!isMatch) return done(null,false,{ error : 'Invalid Credentials' }) ;\r\n\r\n            return done(null,user) ; \r\n        })    \r\n\r\n    }) ;\r\n}));"]}