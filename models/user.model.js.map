{"version":3,"sources":["../../src/models/user.model.js"],"names":["Schema","UserSchema","fullName","type","String","required","email","lowercase","trim","unique","validate","validator","test","message","password","phone","country","address","img","pre","next","account","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","_id","__v","model"],"mappings":";;;;;;AAEA;;;;AACA;;;;;;AAGA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC1BE,cAAU;AACNC,cAAMC,MADA;AAENC,kBAAU;AAFJ,KADgB;AAK1BC,WAAO;AACHH,cAAMC,MADH;AAEHG,mBAAW,IAFR;AAGHC,cAAM,IAHH;AAIHC,gBAAQ,CAAC,IAAD,EAAO,kBAAP,CAJL;AAKHC,kBAAU;AACNC,uBAAW,mBAACL,KAAD;AAAA,uBAAW,iDAAgDM,IAAhD,CAAqDN,KAArD;AAAX;AAAA,aADL;AAENO,qBAAS;AAFH,SALP;AASHR,kBAAU,CAAC,IAAD,EAAO,kBAAP;AATP,KALmB;AAgB1BS,cAAU;AACNX,cAAMC,MADA;AAENC,kBAAU;AAFJ,KAhBgB;AAoB1BU,WAAO;AACHZ,cAAMC,MADH;AAEHC,kBAAU;AAFP,KApBmB;AAwB1BW,aAAS;AACLb,cAAMC,MADD;AAELC,kBAAU;AAFL,KAxBiB;AA4B1BY,aAAS;AACLd,cAAMC,MADD;AAELC,kBAAU;AAFL,KA5BiB;AAgC1Ba,SAAK;AACDf,cAAMC;AADL;AAhCqB,CAAX,CAAnB;;AAsCAH,WAAWkB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,UAAU,IAAhB;;AAEA,uBAAQC,IAAR,CAAaD,QAAQP,QAArB,EAA+B,EAA/B,EAAmCS,IAAnC,CAAwC,gBAAQ;AAC5CF,gBAAQP,QAAR,GAAmBQ,IAAnB;AACAF;AACH,KAHD,EAGGI,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KAHT;AAIH,CAPD;;AASA1B,WAAW2B,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAClE,QAAIC,OAAO,IAAX;AACA,uBAAQC,OAAR,CAAgBH,WAAhB,EAA6BE,KAAKlB,QAAlC,EAA4C,UAAUa,GAAV,EAAeO,OAAf,EAAwB;AAChE,YAAIP,GAAJ,EACI,OAAOI,SAASJ,GAAT,CAAP;;AAEJI,iBAAS,IAAT,EAAe,IAAf;AACH,KALD;AAMH,CARD;;AAWA9B,WAAWkC,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIG,GAAb;AACA,eAAOH,IAAIxB,QAAX;AACA,eAAOwB,IAAIG,GAAX;AACA,eAAOH,IAAII,GAAX;AACH;AANoB,CAAzB;;kBAUe,mBAASC,KAAT,CAAe,MAAf,EAAuB1C,UAAvB,C","file":"user.model.js","sourcesContent":["\n\nimport mongoose from \"mongoose\";\nimport bycrypt from \"bcryptjs\";\n\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n    fullName: {\n        type: String,\n        required: true\n    },\n    email: {\n        type: String,\n        lowercase: true,\n        trim: true,\n        unique: [true, \"Duplicated Email\"],\n        validate: {\n            validator: (email) => /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email),\n            message: 'Invalid Email Syntax'\n        },\n        required: [true, \"Email Required..\"]\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    phone: {\n        type: String,\n        required: true\n    },\n    country: {\n        type: String,\n        required: true\n    },\n    address: {\n        type: String,\n        required: true\n    },\n    img: {\n        type: String\n    }\n});\n\n\nUserSchema.pre(\"save\", function (next) {\n    const account = this;\n\n    bycrypt.hash(account.password, 10).then(hash => {\n        account.password = hash;\n        next();\n    }).catch(err => console.log(err));\n});\n\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\n    let user = this;\n    bycrypt.compare(newPassword, user.password, function (err, isMatch) {\n        if (err)\n            return callback(err);\n\n        callback(null, true);\n    })\n};\n\n\nUserSchema.set('toJSON', {\n    transform: function (doc, ret, options) {\n        ret.id = ret._id;\n        delete ret.password;\n        delete ret._id;\n        delete ret.__v;\n    }\n});\n\n\nexport default mongoose.model(\"user\", UserSchema)"]}