{"version":3,"sources":["../../src/models/barter-offer.model.js"],"names":["Schema","BarterOfferSchema","relatedBarter","type","Types","ObjectId","ref","required","relatedUser","creationDate","Date","default","now","description","String","offeredProduct","imgs","status","enum","set","transform","doc","ret","options","id","_id","__v","model"],"mappings":";;;;;;AACA;;;;;;AACA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,oBAAoB,IAAID,MAAJ,CAAW;AACjCE,mBAAe;AACXC,cAAMH,OAAOI,KAAP,CAAaC,QADR;AAEXC,aAAK,QAFM;AAGXC,kBAAU,CAAC,IAAD,EAAO,0BAAP;AAHC,KADkB;AAMjCC,iBAAa;AACTL,cAAMH,OAAOI,KAAP,CAAaC,QADV;AAETC,aAAK,MAFI;AAGTC,kBAAU,CAAC,IAAD,EAAO,wBAAP;AAHD,KANoB;AAWjCE,kBAAc;AACVN,cAAMO,IADI;AAEVC,iBAASD,KAAKE;AAFJ,KAXmB;AAejCC,iBAAa;AACTV,cAAMW,MADG;AAETP,kBAAU,CAAC,IAAD,EAAO,yBAAP;AAFD,KAfoB;AAmBjCQ,oBAAgB;AACZZ,cAAMW,MADM;AAEZP,kBAAU,CAAC,IAAD,EAAO,4BAAP;AAFE,KAnBiB;AAuBjCS,UAAM;AACFb,cAAM,CAACW,MAAD,CADJ;AAEFP,kBAAU,CAAC,IAAD,EAAO,iCAAP;AAFR,KAvB2B;AA2BjCU,YAAQ;AACJd,cAAMW,MADF;AAEJI,cAAO,CAAC,SAAD,EAAW,UAAX,EAAsB,UAAtB,EAAiC,MAAjC,CAFH;AAGJP,iBAAS;AAHL;AA3ByB,CAAX,CAA1B;;AAkCAV,kBAAkBkB,GAAlB,CAAsB,QAAtB,EAAgC;AAC5BC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIG,GAAb;AACA,eAAOH,IAAIG,GAAX;AACA,eAAOH,IAAII,GAAX;AACH;AAL2B,CAAhC;;kBAQe,mBAASC,KAAT,CAAe,aAAf,EAA8B1B,iBAA9B,C","file":"barter-offer.model.js","sourcesContent":["\nimport mongoose from \"mongoose\" ;\nconst Schema = mongoose.Schema ;\n\nconst BarterOfferSchema = new Schema({\n    relatedBarter: {\n        type: Schema.Types.ObjectId, \n        ref: 'barter',\n        required: [true, 'Id of barter is required']\n    },\n    relatedUser: {\n        type: Schema.Types.ObjectId, \n        ref: 'user',\n        required: [true, 'Id of user is required']\n    },\n    creationDate: {\n        type: Date,\n        default: Date.now\n    },\n    description: {\n        type: String,\n        required: [true, 'description is required']\n    },\n    offeredProduct: {\n        type: String,\n        required: [true, 'offeredProduct is required']\n    },\n    imgs: {\n        type: [String],\n        required: [true, 'IMGS of barterOffer is required']\n    },\n    status: {\n        type: String,\n        enum : ['PENDING','ACCEPTED','REJECTED','DONE'],\n        default: 'PENDING'\n    }\n});\n\nBarterOfferSchema.set('toJSON', {\n    transform: function (doc, ret, options) {\n        ret.id = ret._id;\n        delete ret._id;\n        delete ret.__v;\n    }\n}); \n\nexport default mongoose.model(\"barterOffer\", BarterOfferSchema);"]}